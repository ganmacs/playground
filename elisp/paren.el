(defun matching-paren-p ()
  (let ((s (char-to-string (char-after (point)))))
    (s-contains? s ")]}")))

(defun not-matching ()
  (let ((s (char-to-string (char-after (point)))))
    (not (s-contains? s "{}[]()"))))

(defun goto-matching-paren ()
  (interactive)
  (cond ((matching-paren-p)
         (forward-char)
         (goto-char (nth 2 (show-paren--default))))
        ((not-matching)
         (when (search-forward-regexp "[(\\[\[{)}]" (point-at-eol) nil 1)
           (backward-char))
         nil)
        (t
         (-if-let (p (show-paren--default))
             (goto-char (nth 2 p))
           (forward-char)
           (-if-let (p (show-paren--default))
               (goto-char (nth 2 p))
             (backward-char))))))
