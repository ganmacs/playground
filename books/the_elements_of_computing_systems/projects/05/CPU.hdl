// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    DMux(in=true,sel=instruction[15],a=opA,b=opC);

    // Register A
    Mux16(a=instruction,b=outAlu,sel=instruction[15],out=forRegAin);
    Mux(a=opA,b=writableA,sel=instruction[15],out=forRegAload);
    ARegister(in=forRegAin,load=forRegAload,out=regA,out[0..14]=addressM);

    // Register D
    DRegister(in=outAlu,load=writableD,out=regD);

    // comp
    Mux16(a=regA,b=inM,sel=instruction[12],out=yin);
    ALU(x=regD,y=yin,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],zr=zr,ng=ng,out=outAlu,out=outM);

    // dest
    And(a=opC,b=instruction[3],out=writeM);
    And(a=opC,b=instruction[4],out=writableD);
    And(a=opC,b=instruction[5],out=writableA);

    // jump
    And(a=true,b=zr,out=jeq);
    Not(in=ng,out=jge);
    And(a=true,b=ng,out=jlt);
    Not(in=zr,out=jne);
    Or(a=zr,b=ng,out=jle);
    Not(in=jle,out=jgt);

    Mux8Way(a=false,b=jgt,c=jeq,d=jge,e=jlt,f=jne,g=jle,h=true,sel=instruction[0..2],out=jumpp);

    // pc
    And(a=opC,b=jumpp,out=jjj);
    PC(in=regA,load=jjj,inc=true,reset=reset,out[0..14]=pc);
}