function Math.init 0
push constant 0
return
function Math.abs 0
push argument 0
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
neg
return
goto IF_END0
label IF_FALSE0
push argument 0
return
label IF_END0
function Math.multiply 5
push argument 0
call Math.abs 1
pop local 1
push argument 1
call Math.abs 1
pop local 4
push constant 0
pop local 2
push constant 1
pop local 0
push argument 0
push constant 0
eq
push argument 1
push constant 0
eq
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
goto IF_END0
label IF_FALSE0
label WHILE_EXP0
push local 0
push constant 1025
lt
not
if-goto WHILE_END0
push local 1
push local 0
and
push local 0
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 2
push local 1
add
pop local 2
label IF_FALSE1
push local 1
push local 1
add
pop local 1
push local 0
push local 0
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
label IF_END0
push argument 0
push constant 0
lt
push argument 1
push constant 0
gt
and
push argument 0
push constant 0
gt
push argument 1
push constant 0
lt
and
or
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 2
neg
pop local 2
label IF_FALSE2
push local 2
return
function Math.divide 4
push argument 0
call Math.abs 1
pop local 2
push argument 1
call Math.abs 1
pop local 1
push constant 0
pop local 3
push argument 1
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 3
call Sys.error 1
pop temp 0
label IF_FALSE0
push local 1
push argument 0
gt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
return
label IF_FALSE1
push local 2
push local 1
push constant 2
call Math.multiply 2
call Math.divide 2
pop local 0
push local 2
push constant 2
push local 0
call Math.multiply 2
push local 1
call Math.multiply 2
sub
push local 1
lt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 2
push local 0
call Math.multiply 2
pop local 3
goto IF_END2
label IF_FALSE2
push constant 2
push local 0
call Math.multiply 2
push constant 1
add
pop local 3
label IF_END2
push argument 0
push constant 0
lt
push argument 1
push constant 0
gt
and
push argument 0
push constant 0
gt
push argument 1
push constant 0
lt
and
or
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push local 3
neg
pop local 3
label IF_FALSE3
push local 3
return
function Math.sqrt 1
push local 0
return
function Math.max 0
push argument 0
push argument 1
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
return
goto IF_END0
label IF_FALSE0
push argument 0
return
label IF_END0
function Math.min 0
push argument 0
push argument 1
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
return
goto IF_END0
label IF_FALSE0
push argument 1
return
label IF_END0
